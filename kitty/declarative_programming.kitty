type IntArray = array of int;
type IntList = record of { internal: IntArray, size: int };

val mapInt = (lst: IntList, apply: (int) -> int): IntList -> {
    var i: int;
    var newArray: IntArray;
    var newList: IntList;
    var oldList: IntArray;

    allocate newList of length (lst.size);
    allocate newList;

    i = lst.size;
    while i > 0 do {
        oldList = lst.internal;

        newArray[i - 1] = apply(oldList[i - 1]);
        i = i - 1;
    }

    newList.internal = newArray;
    newList.size = lst.size;

    return newList;
};

func mulTwo(intList: IntList): IntList
    val afterMap = mapInt(intList, (o: int): int -> {
        return 2 * o;
    });

    return afterMap;
end mulTwo

func anonMulTwo(intList: IntList): IntList
    return mapInt(intList, (o: int): int -> {
        return 2 * o;
    });
end anonMulTwo

return 5;