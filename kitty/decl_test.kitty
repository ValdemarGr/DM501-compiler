(*
var should_behidden : int;
(*
var a : int, b : bool;
*)
var c : int;
*)

type A = array of bool;

type B = record of { a: int, b: int };

func hallo(times:int):bool
var d : int,
c: bool;

allocate a of length q;

while asd do {
    while asd do {
        return stm;
    }
}

return c;
end hallo

return 1+1;

if a then
    if b then
        return c;

if asd then
return a;
else
return b;

if dsa then
return q;

allocate asd;

allocate asd of length dsa;

write asd;

while asd do {
    return stm;
}

while asd do
    return stm;
return dsa;

return !asd;
return a < b;
return a > b;
return a >= b;
return a <= b;
return a == b;
return a != b;
return a && b;
return a || b;

if !a then {
    return !b;
    return !a;
    return |a|;
}

if !a then
    return !b;

if 1+1 then
    return 2+b;

return a[1+1];
return a.hest;

return 1;
return null;
return true;
return false;