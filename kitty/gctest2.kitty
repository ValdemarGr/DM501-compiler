# This should be moved in phase 2 of gc
class B {
    var mutableField: int;
    val set = (newValue: int): void -> {
        mutableField = newValue;
    };
    val get = (): int -> {
        return mutableField;
    };
    val print = (): void -> {
        write mutableField;
    };
};

# This should be moved in phase 1 of gc since its binded by the stack
class A {
    var refToB: class B;
    val deepSet = (newValue: int): void -> {
        refToB.mutableField = newValue;
    };
    val deepGet = (): int -> {
        return refToB.mutableField;
    };
    val deepPrint = (): void -> {
        write refToB.mutableField;
    };
};

class C {
    var refToA: class A;
};

var a: class A;
var c: class C;
allocate a;
allocate a.refToB;

allocate c;
allocate c.refToA;
allocate c.refToA.refToB;

a.deepSet(434);

gc;

allocate c;
allocate c.refToA;

c.refToA = a;
c.refToA.deepPrint();
